AvoidSynonymsRule {
  dictionary {
    customer_id:  [customerid, c_id, cid, custid, cust_id]
    order_id:     [orderid, o_id, ord_id]
    payment_id:   [paymentid, p_id]
    parcel_id:    [parcelid]
    article_id:   [articleid, a_id, art_id]
  }
}

HttpHeadersRule {
  whitelist: [ETag, TSV, TE, Content-MD5, DNT, X-ATT-DeviceId, X-UIDH, X-Request-ID, X-Correlation-ID,
              WWW-Authenticate, X-XSS-Protection, X-Flow-ID, X-UID, X-Tenant-ID, X-Device-OS, X-Trace-ID,
              X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Reset]
}

SnakeCaseInPropNameRule {
  whitelist: [_links]
}

LimitNumberOfResourcesRule {
  resource_types_limit: 8
}

LimitNumberOfSubresourcesRule {
  subresources_limit: 3
}

CommonFieldTypesRule {
  common_types {
    id:       [string, null]
    created:  [string, date-time]
    modified: [string, date-time]
    type:     [string, null]
  }
}

UseStandardHttpStatusCodes {
  allowed {
    // Success Codes
    200: [ALL]
    201: [POST, PUT]
    202: [POST, PUT, DELETE, PATCH]
    204: [PUT, DELETE, PATCH]
    207: [POST]

    // Redirection Codes
    301: [ALL]
    303: [PATCH, POST, PUT, DELETE]
    304: [GET]

    // Client Side Error Codes
    400: [ALL]
    401: [ALL]
    403: [ALL]
    404: [ALL]
    405: [ALL]
    406: [ALL]
    408: [ALL]
    409: [POST, PUT, DELETE, PATCH]
    410: [ALL]
    412: [PUT, DELETE, PATCH]
    415: [POST, PUT, DELETE, PATCH]
    423: [PUT, DELETE, PATCH]
    428: [ALL]
    429: [ALL]

    // Server Side Error Codes
    500: [ALL]
    501: [ALL]
    503: [ALL]

    // Zally Additions
    default: [ALL]
  }
}

PluralizeResourceNamesRule {
  whitelist_prefixes: [api]
}

NotSpecifyStandardErrorCodesRule {
  standard_error_codes: [401, 403, 404, 405, 406, 408, 413, 414, 415, 500, 502, 503, 504]
}

UseOpenApiRule {
  swagger_schema_urls: [
    "https://cdn.rawgit.com/OAI/OpenAPI-Specification/master/schemas/v2.0/schema.json",
    "https://cdn.rawgit.com/googleapis/gnostic/master/OpenAPIv3/openapi-3.0.json"
  ]
}

FormatForNumbersRule {
  formats {
    integer:  [int32, int64, bigint]
    number:   [float, double, decimal]
  }
}

ApiAudienceRule {
  audiences: [component-internal, business-unit-internal, company-internal, external-partner, external-public]
}

SecureAllEndpointsWithScopesRule {
  scope_regex: "^(uid)|(([a-z-]+\\.){1,2}(read|write))$"
}

